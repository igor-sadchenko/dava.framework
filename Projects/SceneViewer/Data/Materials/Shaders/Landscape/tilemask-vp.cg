#include "common.cgh"

VPROG_IN_BEGIN
    VPROG_IN_POSITION
    VPROG_IN_TEXCOORD
VPROG_IN_END



VPROG_OUT_BEGIN
    
    VPROG_OUT_POSITION
    VPROG_OUT_TEXCOORD0(texCoord,2)
    #if TILEMASK
        VPROG_OUT_TEXCOORD1(texCoordTiled,2)
    #endif

    #if VERTEX_FOG
        VPROG_OUT_TEXCOORD5(varFog,4)
    #endif

VPROG_OUT_END



property float4x4 worldViewProjMatrix          : dynamic,a : ;

#if TILEMASK
    property float2   textureTiling : static,instance : def_value=50,50;
#endif

#if VERTEX_FOG
property float4x4 worldMatrix                  : dynamic,a : ;
property float4x4 worldViewMatrix              : dynamic,a : ;
property float3   cameraPosition               : dynamic,a : ;
#endif
#if VERTEX_FOG && FOG_ATMOSPHERE
property float4   lightPosition0               : dynamic,a : ;
#endif

#include "vp-fog-props.cgh"


VPROG_BEGIN

    float3 in_pos      = VP_IN_POSITION;
    float2 in_texcoord = VP_IN_TEXCOORD;
    
    VP_OUT_POSITION = mul( float4(in_pos.x,in_pos.y,in_pos.z,1.0), worldViewProjMatrix );
    
    VP_OUT(texCoord) = in_texcoord;
    
    #if TILEMASK
        VP_OUT(texCoordTiled) = in_texcoord * float2(textureTiling.x, textureTiling.y);
    #endif
	
#if VERTEX_FOG
	
	float3 view_position = mul( float4(VP_IN_POSITION,1.0), worldViewMatrix ).xyz;
	#define FOG_view_position view_position
	
#if FOG_ATMOSPHERE
	float3 tolight_dir = lightPosition0.xyz - view_position * lightPosition0.w;
    #define FOG_to_light_dir tolight_dir
#endif
	
#if FOG_HALFSPACE || FOG_ATMOSPHERE_MAP
	float3 world_position = mul( float4(VP_IN_POSITION,1.0), worldMatrix ).xyz;
	#define FOG_world_position world_position
#endif

    #define FOG_eye_position cameraPosition

	#include "vp-fog-math.cgh" // in{ float3 FOG_view_position, float3 FOG_eye_position, float3 FOG_to_light_dir, float3 FOG_world_position }; out{ float4 FOG_result };
	
	VP_OUT(varFog) = FOG_result;
	
#endif
    
VPROG_END
